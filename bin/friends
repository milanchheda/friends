#!/usr/bin/env ruby
# frozen_string_literal: true

require "gli"
require "paint"
require "readline"
require "semverse"

require "friends/introvert"
require "friends/version"

include GLI::App

program_desc "Spend time with the people you care about. Introvert-tested. "\
  "Extrovert-approved."

version Friends::VERSION

subcommand_option_handling :normal
arguments :strict

class Tag
  # @param str [String] of the form "tag" or "@tag"
  # @return [String] the string, with whitespace stripped and a tag
  #   prepended if there isn't one already
  # NOTE: This logic could be only in the accept block if GLI allowed type
  # conversions for arguments.
  # See: https://github.com/davetron5000/gli/issues/241
  def self.convert_to_tag(str)
    str = str.strip
    !str.empty? && str[0] == "@" ? str : "@#{str}"
  end
end

accept(Tag) do |value|
  Tag.convert_to_tag(value)
end

class Stripped; end
accept(Stripped, &:strip)

switch [:quiet],
       negatable: false,
       desc: "Quiet output messages"

flag [:filename],
     arg_name: "FILENAME",
     default_value: "./friends.md",
     desc: "Set the location of the friends file"

switch [:debug],
       negatable: false,
       desc: "Debug error messages with a full backtrace"

switch [:colorless],
       negatable: false,
       desc: "Disable output colorization and other effects"

commands_from "friends/commands"

# Before each command, clean up all arguments and create the global Introvert.
pre do |global_options, cmd, options|
  # If the --colorless flag is passed, don't do any fancy painting.
  Paint.mode = 0 if global_options[:colorless]

  @debug_mode = global_options[:debug]

  final_options = global_options.merge!(options).select do |key, _|
    [:filename].include? key
  end

  # If we're updating the friends program we don't need to read the friends file
  # but we don't skip this block entirely because we might still want to enable
  # debug mode.
  @introvert = Friends::Introvert.new(final_options) unless cmd.name == :update

  true # Continue executing the command.
end

post do |global_options|
  # After each command, clean the file if we have modifications to make.
  filename = @introvert.clean if @dirty

  # This is a special-case piece of code that lets us print a message that
  # includes the filename when `friends clean` is called.
  @message = "File cleaned: \"#{filename}\"" if @clean_command

  # Print the output message (if there is one) unless --quiet is passed.
  puts @message unless @message.nil? || global_options[:quiet]
end

# If an error is raised, print the message to STDERR and exit the program.
on_error do |error|
  if @debug_mode
    raise error
  else
    abort "Error: #{error}"
  end
end

# Run the program and return the exit code corresponding to its success.
exit run(ARGV)
